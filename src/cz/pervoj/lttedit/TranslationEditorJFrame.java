/*
 * Copyright (C) 2020 Vojtěch Perník <v.pernik@centrum.cz>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package cz.pervoj.lttedit;

import cz.pervoj.lttedit.classes.*;
import cz.pervoj.lttlib.LTTGetter;
import java.awt.Toolkit;
import java.io.File;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vojtěch Perník <v.pernik@centrum.cz>
 */
public class TranslationEditorJFrame extends javax.swing.JFrame {
    
    private LTTGetter ltt;    
    private File file;
    private TranslationController translations;
    private AbstractTableModel model;
    private int selected = -1;

    public TranslationEditorJFrame(File file, TranslationController translations) {
        try {
            ltt = LTTInstancer.getInstance();
        } catch (Exception e) {
            e.printStackTrace();
        }
        this.file = file;
        init();
        this.translations = translations;
        try {
            TranslationParser.saveFile(translations, file);
            updateTable();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage(), ltt.getText("error"), JOptionPane.ERROR_MESSAGE);
            exit();
        }
    }
    
    public TranslationEditorJFrame(File translation) {
        try {
            ltt = LTTInstancer.getInstance();
        } catch (Exception e) {
            e.printStackTrace();
        }
        file = translation;
        init();
        try {
            translations = TranslationParser.parseFile(translation);
            updateTable();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage(), ltt.getText("error"), JOptionPane.ERROR_MESSAGE);
            exit();
        }
    }

private void init() {
    initComponents();

    setLocationRelativeTo(null);
        setExtendedState(MAXIMIZED_BOTH);
        
        translationsJTable.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jTable2ValueChanged(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        translationsJTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        updateJButton = new javax.swing.JButton();
        translationJTextField = new javax.swing.JTextField();
        originalJTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notesJTextArea = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        saveJButton = new javax.swing.JButton();
        savedJLabel = new javax.swing.JLabel();
        metaEditJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(ltt.getText("app name"));
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("rsc/icons/lttedit.png")));
        setMinimumSize(new java.awt.Dimension(500, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        translationsJTable.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        translationsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Original", "Translation"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        translationsJTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        translationsJTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                translationsJTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(translationsJTable);

        updateJButton.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        updateJButton.setText(ltt.getText("update list"));
        updateJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateJButtonActionPerformed(evt);
            }
        });

        translationJTextField.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N

        originalJTextField.setEditable(false);
        originalJTextField.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        jLabel1.setText(ltt.getText("translation:"));

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        jLabel2.setText(ltt.getText("original:"));

        notesJTextArea.setEditable(false);
        notesJTextArea.setColumns(20);
        notesJTextArea.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        notesJTextArea.setRows(5);
        jScrollPane1.setViewportView(notesJTextArea);

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        jLabel3.setText(ltt.getText("notes:"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(originalJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(updateJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(translationJTextField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(originalJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(translationJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(updateJButton)
                .addContainerGap())
        );

        saveJButton.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        saveJButton.setText(ltt.getText("save"));
        saveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJButtonActionPerformed(evt);
            }
        });

        savedJLabel.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        savedJLabel.setText(ltt.getText("saved"));

        metaEditJButton.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        metaEditJButton.setText(ltt.getText("edit meta info"));
        metaEditJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metaEditJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(saveJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(savedJLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(metaEditJButton)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveJButton)
                    .addComponent(savedJLabel)
                    .addComponent(metaEditJButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateJButtonActionPerformed
        if (selected >= 0) {
            if (translationJTextField.getText().contains("=")) {
                int result = JOptionPane.showConfirmDialog(this, ltt.getText("equal sign in translation"), ltt.getText("warning"), JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
                if (result == JOptionPane.OK_OPTION) {
                    translations.translateOne(selected, translationJTextField.getText());
                }
            } else {
                translations.translateOne(selected, translationJTextField.getText());
            }
            updateTable(selected);
            updateSavedLabel();
        }
    }//GEN-LAST:event_updateJButtonActionPerformed

    private void translationsJTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_translationsJTableMouseClicked
        updateTextFields();
    }//GEN-LAST:event_translationsJTableMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (translations.isSaved()) {
            exit();
        } else{
            int result = JOptionPane.showConfirmDialog(this, ltt.getText("unsaved translation"), ltt.getText("warning"), JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                exit();
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void saveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJButtonActionPerformed
        try {
            translations = TranslationParser.saveFile(translations, file);
            updateTable();
            updateSavedLabel();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage(), ltt.getText("error"), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveJButtonActionPerformed

    private void metaEditJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metaEditJButtonActionPerformed
        MetaEditJDialog me = new MetaEditJDialog(this, true, translations.getAuthor());
        me.setVisible(true);
        
        if (me.getAuthor() != null) {
            translations.setAuthor(me.getAuthor());
            updateSavedLabel();
        }
    }//GEN-LAST:event_metaEditJButtonActionPerformed

    private void jTable2ValueChanged(javax.swing.event.ListSelectionEvent evt) {
    }
    
    private void updateTable() {
        Object[] titles = {ltt.getText("original"), ltt.getText("translation")};
        model = (AbstractTableModel) new DefaultTableModel(translations.getModelArray(), titles) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        translationsJTable.setModel(model);
        model.fireTableDataChanged();
    }
    
    private void updateTable(int selection) {
        updateTable();
        translationsJTable.setRowSelectionInterval(selection, selection);
    }
    
    private void updateSavedLabel() {
        if (translations.isSaved()) {
            savedJLabel.setText(ltt.getText("saved"));
        } else {
            savedJLabel.setText(ltt.getText("unsaved"));
        }
    }
    
    private void updateTextFields() {
        selected = translationsJTable.getSelectedRow();
        originalJTextField.setText(translations.getOne(translationsJTable.getSelectedRow()).getOriginal());
        translationJTextField.setText(translations.getOne(translationsJTable.getSelectedRow()).getTranslation());
        notesJTextArea.setText(translations.getNotesString(translationsJTable.getSelectedRow()));
    }
    
    private void exit() {
        new MainMenuJFrame().setVisible(true);
        dispose();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton metaEditJButton;
    private javax.swing.JTextArea notesJTextArea;
    private javax.swing.JTextField originalJTextField;
    private javax.swing.JButton saveJButton;
    private javax.swing.JLabel savedJLabel;
    private javax.swing.JTextField translationJTextField;
    private javax.swing.JTable translationsJTable;
    private javax.swing.JButton updateJButton;
    // End of variables declaration//GEN-END:variables
}
